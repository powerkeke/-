/*
author: keke
project name:Dijkstra算法
Time Complexity: O(nlog(n))
*/
#include<bits/stdc++.h>
using namespace std;
#define pi acos(-1.0)
#define inf 0x3f3f3f3f
typedef long long ll;
typedef unsigned long long ull;
typedef double db;
int mo[4][2] = { -1,0,1,0,0,-1,0,1 };
//int mo[8][2] = { -1,0,1,0,-1,-1,1,1,0,-1,0,1,1,-1,-1,1 };
const int maxn = 110;
int n, m, is, t, ans, cnt, head[maxn], a, b, c, dis[maxn];
bool vis[maxn];
struct xx {
	int t, next, w;
}xx[maxn << 1];
void add(int a, int b, int c) {//链式前向星
	xx[cnt].next = head[a];
	xx[cnt].t = b;
	xx[cnt].w = c;
	head[a] = cnt++;
}
void solve(int x, int y) {
	memset(vis, false, sizeof(vis));
	for (int i = 1; i <= n; i++)dis[i] = inf;
	priority_queue<pair<int, int>, vector<pair<int, int> >, greater<pair<int, int> > > q;
	while (!q.empty())q.pop();
	dis[x] = 0;
	q.push(make_pair(0, x));//采用堆优化
	while (!q.empty()) {
		int a = q.top().first, b = q.top().second;
		q.pop();
		if (vis[b])continue;
		vis[b] = true;
		for (int i = head[b]; ~i; i = xx[i].next) {
			int to = xx[i].t;
			if (xx[i].w + a < dis[to]) {//松弛操作
				dis[to] = a + xx[i].w;
				q.push(make_pair(dis[to], to));
			}
		}
	}
	if (dis[y] == inf)cout << "No path" << "\n";
	else cout << dis[y] << "\n";
}
int main() {
#ifdef ONLINE_JUDGE
#else
	//freopen("input.txt", "r", stdin);
#endif
	ios::sync_with_stdio(0);
	cin.tie(0), cout.tie(0);
	cout << fixed << setprecision(2);
	while (cin >> n >> m) {
		cnt = 0;
		memset(head, -1, sizeof(head));
		for (int i = 1; i <= m; i++) {
			cin >> a >> b >> c;
			add(a, b, c);
			add(b, a, c);
		}
		cin >> a >> b;
		solve(a, b);
	}
	return 0;
	//good job!
}
